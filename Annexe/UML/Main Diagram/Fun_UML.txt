@startuml
left to right direction
title Diagramme de class – Système de gestion de films

skinparam package {
  BackgroundColor<<FrontEnd>> LightYellow
  BackgroundColor<<BackEnd>>  AliceBlue
}

hide <<FrontEnd>> stereotype
hide <<BackEnd>>  stereotype

package FrontEnd <<FrontEnd>>{

  package graphics {

    class Login <<Java Class>> {

    }
    
    class CreateAccount <<Java Class>> {
    }
  
    class Accueil <<Java Class>> {
    }
    
    class MoviePage <<Java Class>> {
    }
    
  }
  
  note right of graphics
  Quick legend:
    Might add more class graphics 
    and method and attributs aren't here
  end note

  File Recommendation_IA <<Python module>> {
  }
  
  
  package utils {

    class ApiMovies <<Java Class>> {
      - BASE_URL : String <<static final>>
      - CLIENT : HttpClient <<static final>>
      + getAll() : JSONArray <<static>>
      + getById(movieId : int) : JSONObject <<static>>
      + getBygenre(genre : String) : JSONArray <<static>>
      + getByTitle(title : String) : JSONObject <<static>>
    }
    
    class ApiUsers <<Java Class>> {
      - BASE_URL : String <<static final>>
      - CLIENT : HttpClient <<static final>>
      + getAll() : JSONArray <<static>>
      + getById(userId : int) : JSONObject <<static>>
      + login(email : String, password : String) : JSONObject <<static>>
      + addUser(username : String, email : String, password : String) : void <<static>>
    }
    
    class ApiRatings <<Java Class>> {
      - BASE_URL : String <<static final>>
      - CLIENT : HttpClient <<static final>>
      + getAll() : JSONArray <<static>>
      + getById(ratingId : int) : JSONObject <<static>>
      + getRatingsUsers(userId : int) : JSONArray <<static>>
      + getRatingsMovies(movieId : int) : JSONArray <<static>>
      + modifyRating(ratingId : int, newRating : int) : void <<static>>
    }
    
    class ApiTags <<Java Class>> {
      - BASE_URL : String <<static final>>
      - CLIENT : HttpClient <<static final>>
      + getAll() : JSONArray <<static>>
      + getById(tagId : int) : JSONObject <<static>>
      + getTagsUsers(userId : int) : JSONArray <<static>>
      + getTagsMovies(movieId : int) : JSONArray <<static>>
      + addTag(tagId : int, newTag : String) : void <<static>>
      + deleteTag(tagId : int) : void <<static>>
    }
  }

  Login -- Recommendation_IA
  CreateAccount -- Recommendation_IA
  Accueil -- Recommendation_IA
  MoviePage -- Recommendation_IA
  Recommendation_IA -- ApiMovies
  Recommendation_IA -- ApiUsers
  Recommendation_IA -- ApiRatings
  Recommendation_IA -- ApiTags

  
}

package BackEnd <<BackEnd>>{

  package controller {

    class MoviesController <<Java Class>> {
      - moviesServices : MoviesServices @Inject
      + getAll() : Response @GET
      + getById(movieId : int) : Response @GET
      + getBygenre(genre : String) : Response @GET
      + getByTitle(title : String) : Response @GET
      
    }
    
    class UsersController <<Java Class>> {
      - usersServices : UsersServices @Inject
      + getAll() : Response @GET
      + getById(userId : int) : Response @GET
      + login(email : String, password : String) : Response @GET
      + addUser(username : String, email : String, password : String) : Response @PUT
    }
    
    class RatingsController <<Java Class>> {
      - ratingsServices : RatingsServices @Inject
      + getAll() : Response @GET
      + getById(ratingId : int) : Response @GET
      + getRatingsUsers(userId : int) : Response @GET
      + getRatingsMovies(movieId : int) : Response @GET
      + modifyRating(ratingId : int, newRating : int) : Response @POST
    }
    
    class TagsController <<Java Class>> {
      - tagsServices : TagsServices @Inject
      + getAll() : Response @GET
      + getById(tagId : int) : Response @GET
      + getTagsUsers(userId : int) : Response @GET
      + getTagsMovies(movieId : int) : Response @GET
      + addTag(tagId : int, newTag : String) : Response @PUT
      + deleteTag(tagId : int) : Response @DELETE
    }
  }
  
  package services {

    class MoviesServices <<Java Class>> {
      - moviesRepository : MoviesRepository <<final>>
      + getAll() : List<Movies>
      + getById(movieId : int) : Movies
      + getBygenre(genre : String) : List<Movies> 
      + getByTitle(title : String) : Movies
    }
    
    class UsersServices <<Java Class>> {
      - usersRepository : UsersRepository <<final>>
      + getAll() : List<Users> 
      + getById(userId : int) : Users 
      + login(email : String, password : String) : Users
      + addUser(username : String, email : String, password : String) : void 
    }
    
    class RatingsServices <<Java Class>> {
      - ratingsRepository : RatingsRepository <<final>>
      + getAll() : List<Ratings>  
      + getById(ratingId : int) : Ratings 
      + getRatingsUsers(userId : int) : List<Ratings>  
      + getRatingsMovies(movieId : int) : List<Ratings>  
      + modifyRating(ratingId : int, newRating : int) : void
    }
    
    class TagsServices <<Java Class>> {
      - tagsRepository : TagsRepository <<final>>
      + getAll() : List<Tags> 
      + getById(tagId : int) : Tags 
      + getTagsUsers(userId : int) : List<Tags>  
      + getTagsMovies(movieId : int) : List<Tags>  
      + addTag(tagId : int, newTag : String) : void 
      + deleteTag(tagId : int) : void 
    }
  }
  
  MoviesController --> MoviesServices
  UsersController --> UsersServices
  RatingsController --> RatingsServices
  TagsController --> TagsServices
  
  package repository {

    class MoviesRepository <<Java Class>> {
      - entityManager : EntityManager @PersistenceContext
      + getAll() : List<Movies>
      + getById(movieId : int) : Movies
      + getBygenre(genre : String) : List<Movies> 
      + getByTitle(title : String) : Movies
    }
    
    class UsersRepository <<Java Class>> {
      - entityManager : EntityManager @PersistenceContext
      + getAll() : List<Users> 
      + getById(userId : int) : Users 
      + login(email : String, password : String) : Users
      - checkPasswords(password : String, storedPassword : String) : boolean
      - hashPassword(password : String, salt : String) : String
      - generateSalt() : String
      + addUser(username : String, email : String, password : String) : void
    }
    
    class RatingsRepository <<Java Class>> {
      - entityManager : EntityManager @PersistenceContext
      + getAll() : List<Ratings>  
      + getById(ratingId : int) : Ratings 
      + getRatingsUsers(userId : int) : List<Ratings>  
      + getRatingsMovies(movieId : int) : List<Ratings>  
      + modifyRating(ratingId : int, newRating : int) : void
    }
    
    class TagsRepository <<Java Class>> {
      - entityManager : EntityManager @PersistenceContext
      + getAll() : List<Tags> 
      + getById(tagId : int) : Tags 
      + getTagsUsers(userId : int) : List<Tags>  
      + getTagsMovies(movieId : int) : List<Tags>  
      + addTag(tagId : int, newTag : String) : void 
      + deleteTag(tagId : int) : void 
    }
    
  }
  
  MoviesServices --> MoviesRepository
  UsersServices --> UsersRepository
  RatingsServices --> RatingsRepository
  TagsServices --> TagsRepository
  
  package model {

    class Movies <<Java Class>> {
      - movieId : int @Id
      - tags : List<Tags> @OneToMany
      - ratings : List<Ratings> @OneToMany
      - title : String @Column
      - genre :String @Column
      - imdld : String @Column
      - tmbld : String @Column
    }
    
    class Users <<Java Class>> {
      - userId : UUID @Id
      - tags : List<Tags> @OneToMany
      - ratings : List<Ratings> @OneToMany
      - username : String @Column
      - password : String @Column
      - email : String @Column
    }
    
    class Ratings <<Java Class>> {
      - ratingId : int @Id
      - userId : int @ManyToOne @JsonIgnore
      - movieId :int @ManyToOne @JsonIgnore
      - rating : int @Column
      - timestamp : LocalDate @Column
    }
    
    class Tags <<Java Class>> {
      - tagId : int @Id
      - userId : int @ManyToOne @JsonIgnore
      - movieId :int @ManyToOne @JsonIgnore
      - tag : String @Column
      - timestamp : LocalDate @Column
    }
    
    
    Tags "1"--"n" Movies
    Movies "n"--"1" Ratings
    Users "n"--"1" Ratings
    Tags "1"--"n" Users

  }
  note right of model
    Quick legend:
    all id are @GeneratedValue(strategy = GenerationType.IDENTITY)
  end note
    

}

FrontEnd.utils.ApiMovies ..> BackEnd.controller.MoviesController
FrontEnd.utils.ApiUsers ..> BackEnd.controller.UsersController
FrontEnd.utils.ApiRatings ..> BackEnd.controller.RatingsController
FrontEnd.utils.ApiTags ..> BackEnd.controller.TagsController


@enduml
